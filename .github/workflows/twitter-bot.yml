name: Kubetools Twitter Bot

on:
  schedule:
    # Run every 2 hours
    - cron: '0 */2 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      mode:
        description: 'Run mode'
        required: true
        default: 'once'
        type: choice
        options:
          - once
          - health
      debug:
        description: 'Enable debug logging'
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.9'

jobs:
  run-bot:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create data directory
      run: |
        mkdir -p data
        chmod 755 data
    
    - name: Restore data cache
      uses: actions/cache@v3
      with:
        path: data/
        key: bot-data-${{ github.run_id }}
        restore-keys: |
          bot-data-
    
    - name: Run health check
      env:
        TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
        TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
        TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
        TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        TWITTER_BEARER_TOKEN: ${{ secrets.TWITTER_BEARER_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BOT_ENVIRONMENT: production
        TWEETS_PER_DAY: 4
        LOG_LEVEL: INFO
      run: |
        python src/main.py --mode health
    
    - name: Run bot
      env:
        TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
        TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
        TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
        TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        TWITTER_BEARER_TOKEN: ${{ secrets.TWITTER_BEARER_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BOT_ENVIRONMENT: production
        TWEETS_PER_DAY: 4
        LOG_LEVEL: ${{ github.event.inputs.debug == 'true' && 'DEBUG' || 'INFO' }}
      run: |
        MODE="${{ github.event.inputs.mode || 'once' }}"
        DEBUG_FLAG=""
        if [ "${{ github.event.inputs.debug }}" = "true" ]; then
          DEBUG_FLAG="--debug"
        fi
        python src/main.py --mode $MODE $DEBUG_FLAG
    
    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: bot-logs-${{ github.run_id }}
        path: |
          *.log
          data/*.log
        retention-days: 7
    
    - name: Save data cache
      if: always()
      uses: actions/cache/save@v3
      with:
        path: data/
        key: bot-data-${{ github.run_id }}

  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        # Run basic import tests
        python -c "import sys; sys.path.append('src'); import main, kubetools_monitor, twitter_client, tweet_generator, scheduler, database"
        echo "All modules imported successfully"
    
    - name: Validate configuration
      run: |
        python -c "
        import sys
        sys.path.append('src')
        from tweet_generator import TweetGenerator
        from scheduler import TweetScheduler
        
        # Test tweet generation
        generator = TweetGenerator()
        test_tool = {
            'name': 'TestTool',
            'description': 'A test Kubernetes tool',
            'url': 'https://github.com/test/tool',
            'stars': 100,
            'category': 'testing'
        }
        tweet = generator.generate_tweet(test_tool)
        print('Generated test tweet:', tweet[:100] + '...')
        assert len(tweet) <= 280, 'Tweet too long'
        print('Configuration validation passed')
        "

  weekly-summary:
    runs-on: ubuntu-latest
    # Run weekly summary on Sundays at 18:00 UTC
    if: github.event.schedule == '0 18 * * 0'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Restore data cache
      uses: actions/cache@v3
      with:
        path: data/
        key: bot-data-
        restore-keys: |
          bot-data-
    
    - name: Generate weekly summary
      env:
        TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
        TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
        TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
        TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        TWITTER_BEARER_TOKEN: ${{ secrets.TWITTER_BEARER_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BOT_ENVIRONMENT: production
        LOG_LEVEL: INFO
      run: |
        python -c "
        import sys
        import asyncio
        sys.path.append('src')
        from main import KubetoolsTwitterBot
        
        async def weekly_summary():
            bot = KubetoolsTwitterBot()
            # Implementation for weekly summary would go here
            print('Weekly summary generation completed')
        
        asyncio.run(weekly_summary())
        "

  monitor-health:
    runs-on: ubuntu-latest
    # Run health check every 6 hours
    if: github.event.schedule == '0 */6 * * *'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Health check
      env:
        TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
        TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
        TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
        TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        TWITTER_BEARER_TOKEN: ${{ secrets.TWITTER_BEARER_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python src/main.py --mode health
    
    - name: Notify on health check failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Bot Health Check Failed',
            body: `Health check failed at ${new Date().toISOString()}\n\nRun ID: ${context.runId}\nWorkflow: ${context.workflow}`,
            labels: ['bug', 'health-check']
          });
          console.log('Created issue:', issue.data.html_url);
